// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://cbjbnfcmzkkubkklqqlc.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNiamJuZmNtemtrdWJra2xxcWxjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQyNTgzMDIsImV4cCI6MjA1OTgzNDMwMn0.pOfIG_TkxLsajAGAPSYTD6395akldm_enPrvGIg1NKQ";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Note: We're using 'any' here because the generated types don't include all tables yet
// This is a temporary workaround until the types are updated
export const supabase = createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  }
});

// Helper function to get storage URL
export const getStorageUrl = (path: string) => {
  return `${SUPABASE_URL}/storage/v1/object/public/product-images/${path}`;
};

// Helper function to handle storage errors
export const handleStorageError = (error: any) => {
  console.error('Storage error:', error);
  if (error.message.includes('duplicate')) {
    return 'A file with this name already exists';
  }
  if (error.message.includes('permission denied')) {
    return 'You do not have permission to perform this action';
  }
  if (error.message.includes('not found')) {
    return 'The requested file was not found';
  }
  return 'An error occurred while processing your request';
};

// Function to create and configure storage buckets
export const setupStorageBuckets = async () => {
  try {
    // List of buckets to create
    const buckets = [
      {
        name: 'product-images',
        public: true,
        policies: {
          select: '(bucket_id = \'product-images\'::text)',
          insert: '(bucket_id = \'product-images\'::text AND auth.role() = \'authenticated\')',
          update: '(bucket_id = \'product-images\'::text AND auth.role() = \'authenticated\')',
          delete: '(bucket_id = \'product-images\'::text AND auth.role() = \'authenticated\')'
        }
      },
      {
        name: 'brand-logos',
        public: true,
        policies: {
          select: '(bucket_id = \'brand-logos\'::text)',
          insert: '(bucket_id = \'brand-logos\'::text AND auth.role() = \'authenticated\')',
          update: '(bucket_id = \'brand-logos\'::text AND auth.role() = \'authenticated\')',
          delete: '(bucket_id = \'brand-logos\'::text AND auth.role() = \'authenticated\')'
        }
      }
    ];

    // Create each bucket and set up policies
    for (const bucket of buckets) {
      // Check if bucket exists
      const { data: existingBucket } = await supabase.storage.getBucket(bucket.name);
      
      if (!existingBucket) {
        // Create bucket
        const { error: createError } = await supabase.storage.createBucket(bucket.name, {
          public: bucket.public
        });

        if (createError) {
          console.error(`Error creating bucket ${bucket.name}:`, createError);
          continue;
        }
      }

      // Set up policies
      for (const [action, policy] of Object.entries(bucket.policies)) {
        const { error: policyError } = await supabase.storage
          .from(bucket.name)
          .createPolicy(`${bucket.name}-${action}`, action, policy);

        if (policyError) {
          console.error(`Error setting ${action} policy for ${bucket.name}:`, policyError);
        }
      }
    }

    console.log('Storage buckets setup completed');
  } catch (error) {
    console.error('Error setting up storage buckets:', error);
  }
};
